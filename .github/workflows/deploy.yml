# .github/workflows/deploy.yml
# Fix deploy IAM policy
name: Deploy ideal_next_js

on:
  push:
    branches: [ new-ver ]   # deploy when you push to this branch

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-north-1
  ROLE_ARN: arn:aws:iam::551829622535:role/githubrepoIdealtax
  SUBDIR: nextjs-clone            # <â€” your app lives here
  APP_NAME: ideal_next_js         # pm2 app name
  DEPLOY_TAG_KEY: Deploy
  DEPLOY_TAG_VAL: Yes

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # (Optional) CI build/lint that runs inside the subfolder
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.SUBDIR }}/package-lock.json

      # - name: Install & build in subfolder (optional)
      #   working-directory: ${{ env.SUBDIR }}
      #   run: |
      #     npm ci
      #     npm run build

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Run the deploy script on EC2 via SSM.
      # This clones/updates the repo, then installs/builds/starts from the SUBDIR.
      - name: Deploy on EC2 via SSM
        run: |
          CMD_JSON=$(jq -Rs . <<'BASH'
          set -euo pipefail

          REPO_URL="https://github.com/kareou/ideal_next_js"
          BRANCH="new-ver"
          SUBDIR="nextjs-clone"
          APP_ROOT="/srv/ideal_next_js"
          SERVICE_NAME="ideal_next_js"
          PORT="${PORT:-3000}"

          # Use ubuntu user for EC2 instances
          APP_USER="ubuntu"

          sudo mkdir -p "$APP_ROOT"
          sudo chown -R "$APP_USER":"$APP_USER" "$APP_ROOT"
          cd "$APP_ROOT"

          # Install Node.js and Git
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get update
          sudo apt-get install -y nodejs git

          # Checkout/update code
          if [ ! -d .git ]; then sudo -u "$APP_USER" git clone "$REPO_URL" .; fi
          sudo -u "$APP_USER" git fetch --all
          sudo -u "$APP_USER" git checkout "$BRANCH"
          sudo -u "$APP_USER" git reset --hard "origin/$BRANCH"

          cd "$APP_ROOT/$SUBDIR"

          # Install dependencies and build
          sudo -u "$APP_USER" npm ci
          sudo -u "$APP_USER" npm run build

          # Setup systemd service
          SERVICE_PATH="/etc/systemd/system/${SERVICE_NAME}.service"
          sudo tee "$SERVICE_PATH" >/dev/null <<EOF
          [Unit]
          Description=${SERVICE_NAME} Next.js service
          After=network.target

          [Service]
          Type=simple
          User=${APP_USER}
          WorkingDirectory=${APP_ROOT}/${SUBDIR}
          Environment=NODE_ENV=production
          Environment=PORT=${PORT}
          Environment=PATH=/usr/local/bin:/usr/bin:/bin
          ExecStart=/usr/bin/npm run start
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
          EOF

          sudo systemctl daemon-reload
          sudo systemctl enable "${SERVICE_NAME}"
          sudo systemctl restart "${SERVICE_NAME}"
          sudo systemctl status "${SERVICE_NAME}" --no-pager
          BASH
          )
          echo "REGION=$AWS_REGION"
          echo "DEPLOY_TAG_KEY=$DEPLOY_TAG_KEY"
          echo "DEPLOY_TAG_VAL=$DEPLOY_TAG_VAL"
          aws ssm describe-instance-information \
          --region "$AWS_REGION" \
          --filters Key=Tag:${DEPLOY_TAG_KEY},Values=${DEPLOY_TAG_VAL} \
          --query 'InstanceInformationList[].{Id:InstanceId,Tags:Tags}' \
          --output table || true
          # aws ssm send-command \
          # --document-name "AWS-RunShellScript" \
          # --targets "Key=tag:${DEPLOY_TAG_KEY},Values=${DEPLOY_TAG_VAL}" \
          # --comment "Deploy ${APP_NAME}" \
          # --parameters "commands=[$CMD_JSON]"
