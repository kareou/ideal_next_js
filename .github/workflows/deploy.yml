# .github/workflows/deploy.yml
# TEST  3
name: Deploy ideal_next_js

on:
  push:
    branches: [ new-ver ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-north-1
  ROLE_ARN: arn:aws:iam::551829622535:role/githubrepoIdealtax
  SUBDIR: nextjs-clone
  APP_NAME: ideal_next_js
  DEPLOY_TAG_KEY: Deploy
  DEPLOY_TAG_VAL: Yes

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Find EC2 instances with Deploy=Yes and confirm SSM sees them
      - name: Discover instance(s) by tag and confirm SSM
        id: discover
        run: |
          set -euo pipefail
          echo "Region: ${AWS_REGION}"
          echo "Tag: ${DEPLOY_TAG_KEY}=${DEPLOY_TAG_VAL}"

          IDS=$(aws ec2 describe-instances \
            --region "${AWS_REGION}" \
            --filters "Name=tag:${DEPLOY_TAG_KEY},Values=${DEPLOY_TAG_VAL}" "Name=instance-state-name,Values=running" \
            --query 'Reservations[].Instances[].InstanceId' \
            --output text)

          echo "EC2 IDs: ${IDS:-<none>}"

          if [ -n "${IDS}" ]; then
            echo "SSM-managed nodes among those IDs:"
            aws ssm describe-instance-information \
              --region "${AWS_REGION}" \
              --filters "Key=InstanceIds,Values=${IDS}" \
              --query 'InstanceInformationList[].{Id:InstanceId,Ping:PingStatus,Tags:Tags}' \
              --output table
            # Keep only SSM-managed IDs (Ping online/offline both okay for targeting)
            SSM_IDS=$(aws ssm describe-instance-information \
              --region "${AWS_REGION}" \
              --filters "Key=InstanceIds,Values=${IDS}" \
              --query 'InstanceInformationList[].InstanceId' \
              --output text)
          else
            SSM_IDS=""
          fi

          echo "SSM IDs: ${SSM_IDS:-<none>}"
          echo "ids=${SSM_IDS}" >> "$GITHUB_OUTPUT"

          if [ -z "${SSM_IDS}" ]; then
            echo "::error::No SSM-managed instances found for tag ${DEPLOY_TAG_KEY}=${DEPLOY_TAG_VAL} in ${AWS_REGION}."
            exit 1
          fi

      - name: Deploy via SSM
        id: send_cmd
        env:
          REGION: ${{ env.AWS_REGION }}
          INST_IDS: ${{ steps.discover.outputs.ids }}
        run: |
            set -euo pipefail
            CMD=$(cat <<'BASH'
            #!/usr/bin/env bash
            set -euxo pipefail

            echo "Starting deployment script..."

            cd /srv/ideal_next_js || { echo "Failed to change directory to /srv/ideal_next_js"; exit 1; }

            echo "Checking if repository exists..."
            # If this is the first time and repo isn't present:
            # if [ ! -d .git ]; then
            #   sudo -u ubuntu git clone --depth 1 -b new-ver https://github.com/kareou/ideal_next_js .
            # fi

            echo "Fetching latest changes from repository..."
            sudo -u ubuntu git fetch origin new-ver --depth 1 || { echo "Git fetch failed"; exit 1; }

            echo "Checking out branch new-ver..."
            sudo -u ubuntu git checkout -f new-ver || { echo "Git checkout failed"; exit 1; }

            echo "Resetting to the latest commit..."
            sudo -u ubuntu git reset --hard origin/new-ver || { echo "Git reset failed"; exit 1; }

            cd /srv/ideal_next_js/nextjs-clone || { echo "Failed to change directory to /srv/ideal_next_js/nextjs-clone"; exit 1; }

            echo "Installing dependencies..."
            sudo -u ubuntu npm ci --no-audit --no-fund || { echo "npm ci failed"; exit 1; }

            echo "Building the application..."
            sudo -u ubuntu npm run build || { echo "npm build failed"; exit 1; }

            echo "Restarting the service..."
            sudo systemctl restart ideal_next_js || { echo "Service restart failed"; exit 1; }

            echo "Deployment script completed successfully."
            BASH
            )

            # Proper JSON for parameters: {"commands": ["<script>"]}
            PARAM=$(jq -cn --arg s "$CMD" '{commands: [$s]}')
            echo "Parameters: $PARAM"
            RESP=$(aws ssm send-command \
            --region "$REGION" \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${INST_IDS} \
            --parameters "$PARAM" \
            --output json)

            echo "$RESP" | jq .
            CMD_ID=$(echo "$RESP" | jq -r '.Command.CommandId')
            echo "command_id=$CMD_ID" >> "$GITHUB_OUTPUT"

      # Robust waiter: prints stdout/stderr and fails on non-success
      - name: Wait for SSM command to complete & print output
        env:
          REGION: ${{ env.AWS_REGION }}
          INST_IDS: ${{ steps.discover.outputs.ids }}
          CMD_ID: ${{ steps.send_cmd.outputs.command_id }}
        run: |
          set -Eeuo pipefail
          echo "CMD_ID=${CMD_ID}"
          echo "INST_IDS=${INST_IDS}"

          # Only handle the first instance id for output (extend to loop if you target many)
          INST_ID=$(echo "${INST_IDS}" | awk '{print $1}')
          echo "Inspecting instance: ${INST_ID}"

          sleep 5

          for i in $(seq 1 720); do
            OUT=$(aws ssm get-command-invocation \
              --region "$REGION" \
              --command-id "$CMD_ID" \
              --instance-id "$INST_ID" 2>&1 || true)

            if echo "$OUT" | grep -q 'InvocationDoesNotExist'; then
              echo "Status: not-ready (InvocationDoesNotExist)"
              sleep 5
              continue
            fi

            STATUS=$(echo "$OUT" | jq -r '.Status // empty')
            if [ -z "$STATUS" ]; then
              echo "Raw response:"
              echo "$OUT"
              sleep 5
              continue
            fi

            echo "Status: $STATUS"
            if [ "$STATUS" = "Pending" ] || [ "$STATUS" = "InProgress" ]; then
              sleep 5
              continue
            fi

            # Terminal state: print outputs
            echo "$OUT" | jq '{Status, StandardOutputContent, StandardErrorContent}'
            test "$STATUS" = "Success"
            exit 0
          done

          echo "::error::Timed out waiting for SSM command to complete."
          echo "Command summary:"
          aws ssm list-commands --region "$REGION" --command-id "$CMD_ID" --output table || true
          echo "Invocations:"
          aws ssm list-command-invocations --region "$REGION" --command-id "$CMD_ID" --details --output table || true
          exit 1
